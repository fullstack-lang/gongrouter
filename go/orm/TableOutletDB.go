// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongrouter/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_TableOutlet_sql sql.NullBool
var dummy_TableOutlet_time time.Duration
var dummy_TableOutlet_sort sort.Float64Slice

// TableOutletAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model tableoutletAPI
type TableOutletAPI struct {
	gorm.Model

	models.TableOutlet

	// encoding of pointers
	TableOutletPointersEnconding
}

// TableOutletPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TableOutletPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// TableOutletDB describes a tableoutlet in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model tableoutletDB
type TableOutletDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field tableoutletDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	TableOutletPointersEnconding
}

// TableOutletDBs arrays tableoutletDBs
// swagger:response tableoutletDBsResponse
type TableOutletDBs []TableOutletDB

// TableOutletDBResponse provides response
// swagger:response tableoutletDBResponse
type TableOutletDBResponse struct {
	TableOutletDB
}

// TableOutletWOP is a TableOutlet without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TableOutletWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var TableOutlet_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoTableOutletStruct struct {
	// stores TableOutletDB according to their gorm ID
	Map_TableOutletDBID_TableOutletDB map[uint]*TableOutletDB

	// stores TableOutletDB ID according to TableOutlet address
	Map_TableOutletPtr_TableOutletDBID map[*models.TableOutlet]uint

	// stores TableOutlet according to their gorm ID
	Map_TableOutletDBID_TableOutletPtr map[uint]*models.TableOutlet

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTableOutlet *BackRepoTableOutletStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTableOutlet.stage
	return
}

func (backRepoTableOutlet *BackRepoTableOutletStruct) GetDB() *gorm.DB {
	return backRepoTableOutlet.db
}

// GetTableOutletDBFromTableOutletPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTableOutlet *BackRepoTableOutletStruct) GetTableOutletDBFromTableOutletPtr(tableoutlet *models.TableOutlet) (tableoutletDB *TableOutletDB) {
	id := backRepoTableOutlet.Map_TableOutletPtr_TableOutletDBID[tableoutlet]
	tableoutletDB = backRepoTableOutlet.Map_TableOutletDBID_TableOutletDB[id]
	return
}

// BackRepoTableOutlet.CommitPhaseOne commits all staged instances of TableOutlet to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTableOutlet *BackRepoTableOutletStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for tableoutlet := range stage.TableOutlets {
		backRepoTableOutlet.CommitPhaseOneInstance(tableoutlet)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, tableoutlet := range backRepoTableOutlet.Map_TableOutletDBID_TableOutletPtr {
		if _, ok := stage.TableOutlets[tableoutlet]; !ok {
			backRepoTableOutlet.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTableOutlet.CommitDeleteInstance commits deletion of TableOutlet to the BackRepo
func (backRepoTableOutlet *BackRepoTableOutletStruct) CommitDeleteInstance(id uint) (Error error) {

	tableoutlet := backRepoTableOutlet.Map_TableOutletDBID_TableOutletPtr[id]

	// tableoutlet is not staged anymore, remove tableoutletDB
	tableoutletDB := backRepoTableOutlet.Map_TableOutletDBID_TableOutletDB[id]
	query := backRepoTableOutlet.db.Unscoped().Delete(&tableoutletDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoTableOutlet.Map_TableOutletPtr_TableOutletDBID, tableoutlet)
	delete(backRepoTableOutlet.Map_TableOutletDBID_TableOutletPtr, id)
	delete(backRepoTableOutlet.Map_TableOutletDBID_TableOutletDB, id)

	return
}

// BackRepoTableOutlet.CommitPhaseOneInstance commits tableoutlet staged instances of TableOutlet to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTableOutlet *BackRepoTableOutletStruct) CommitPhaseOneInstance(tableoutlet *models.TableOutlet) (Error error) {

	// check if the tableoutlet is not commited yet
	if _, ok := backRepoTableOutlet.Map_TableOutletPtr_TableOutletDBID[tableoutlet]; ok {
		return
	}

	// initiate tableoutlet
	var tableoutletDB TableOutletDB
	tableoutletDB.CopyBasicFieldsFromTableOutlet(tableoutlet)

	query := backRepoTableOutlet.db.Create(&tableoutletDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoTableOutlet.Map_TableOutletPtr_TableOutletDBID[tableoutlet] = tableoutletDB.ID
	backRepoTableOutlet.Map_TableOutletDBID_TableOutletPtr[tableoutletDB.ID] = tableoutlet
	backRepoTableOutlet.Map_TableOutletDBID_TableOutletDB[tableoutletDB.ID] = &tableoutletDB

	return
}

// BackRepoTableOutlet.CommitPhaseTwo commits all staged instances of TableOutlet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTableOutlet *BackRepoTableOutletStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, tableoutlet := range backRepoTableOutlet.Map_TableOutletDBID_TableOutletPtr {
		backRepoTableOutlet.CommitPhaseTwoInstance(backRepo, idx, tableoutlet)
	}

	return
}

// BackRepoTableOutlet.CommitPhaseTwoInstance commits {{structname }} of models.TableOutlet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTableOutlet *BackRepoTableOutletStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, tableoutlet *models.TableOutlet) (Error error) {

	// fetch matching tableoutletDB
	if tableoutletDB, ok := backRepoTableOutlet.Map_TableOutletDBID_TableOutletDB[idx]; ok {

		tableoutletDB.CopyBasicFieldsFromTableOutlet(tableoutlet)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoTableOutlet.db.Save(&tableoutletDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown TableOutlet intance %s", tableoutlet.Name))
		return err
	}

	return
}

// BackRepoTableOutlet.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTableOutlet *BackRepoTableOutletStruct) CheckoutPhaseOne() (Error error) {

	tableoutletDBArray := make([]TableOutletDB, 0)
	query := backRepoTableOutlet.db.Find(&tableoutletDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	tableoutletInstancesToBeRemovedFromTheStage := make(map[*models.TableOutlet]any)
	for key, value := range backRepoTableOutlet.stage.TableOutlets {
		tableoutletInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, tableoutletDB := range tableoutletDBArray {
		backRepoTableOutlet.CheckoutPhaseOneInstance(&tableoutletDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		tableoutlet, ok := backRepoTableOutlet.Map_TableOutletDBID_TableOutletPtr[tableoutletDB.ID]
		if ok {
			delete(tableoutletInstancesToBeRemovedFromTheStage, tableoutlet)
		}
	}

	// remove from stage and back repo's 3 maps all tableoutlets that are not in the checkout
	for tableoutlet := range tableoutletInstancesToBeRemovedFromTheStage {
		tableoutlet.Unstage(backRepoTableOutlet.GetStage())

		// remove instance from the back repo 3 maps
		tableoutletID := backRepoTableOutlet.Map_TableOutletPtr_TableOutletDBID[tableoutlet]
		delete(backRepoTableOutlet.Map_TableOutletPtr_TableOutletDBID, tableoutlet)
		delete(backRepoTableOutlet.Map_TableOutletDBID_TableOutletDB, tableoutletID)
		delete(backRepoTableOutlet.Map_TableOutletDBID_TableOutletPtr, tableoutletID)
	}

	return
}

// CheckoutPhaseOneInstance takes a tableoutletDB that has been found in the DB, updates the backRepo and stages the
// models version of the tableoutletDB
func (backRepoTableOutlet *BackRepoTableOutletStruct) CheckoutPhaseOneInstance(tableoutletDB *TableOutletDB) (Error error) {

	tableoutlet, ok := backRepoTableOutlet.Map_TableOutletDBID_TableOutletPtr[tableoutletDB.ID]
	if !ok {
		tableoutlet = new(models.TableOutlet)

		backRepoTableOutlet.Map_TableOutletDBID_TableOutletPtr[tableoutletDB.ID] = tableoutlet
		backRepoTableOutlet.Map_TableOutletPtr_TableOutletDBID[tableoutlet] = tableoutletDB.ID

		// append model store with the new element
		tableoutlet.Name = tableoutletDB.Name_Data.String
		tableoutlet.Stage(backRepoTableOutlet.GetStage())
	}
	tableoutletDB.CopyBasicFieldsToTableOutlet(tableoutlet)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	tableoutlet.Stage(backRepoTableOutlet.GetStage())

	// preserve pointer to tableoutletDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TableOutletDBID_TableOutletDB)[tableoutletDB hold variable pointers
	tableoutletDB_Data := *tableoutletDB
	preservedPtrToTableOutlet := &tableoutletDB_Data
	backRepoTableOutlet.Map_TableOutletDBID_TableOutletDB[tableoutletDB.ID] = preservedPtrToTableOutlet

	return
}

// BackRepoTableOutlet.CheckoutPhaseTwo Checkouts all staged instances of TableOutlet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTableOutlet *BackRepoTableOutletStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, tableoutletDB := range backRepoTableOutlet.Map_TableOutletDBID_TableOutletDB {
		backRepoTableOutlet.CheckoutPhaseTwoInstance(backRepo, tableoutletDB)
	}
	return
}

// BackRepoTableOutlet.CheckoutPhaseTwoInstance Checkouts staged instances of TableOutlet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTableOutlet *BackRepoTableOutletStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, tableoutletDB *TableOutletDB) (Error error) {

	tableoutlet := backRepoTableOutlet.Map_TableOutletDBID_TableOutletPtr[tableoutletDB.ID]
	_ = tableoutlet // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitTableOutlet allows commit of a single tableoutlet (if already staged)
func (backRepo *BackRepoStruct) CommitTableOutlet(tableoutlet *models.TableOutlet) {
	backRepo.BackRepoTableOutlet.CommitPhaseOneInstance(tableoutlet)
	if id, ok := backRepo.BackRepoTableOutlet.Map_TableOutletPtr_TableOutletDBID[tableoutlet]; ok {
		backRepo.BackRepoTableOutlet.CommitPhaseTwoInstance(backRepo, id, tableoutlet)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTableOutlet allows checkout of a single tableoutlet (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTableOutlet(tableoutlet *models.TableOutlet) {
	// check if the tableoutlet is staged
	if _, ok := backRepo.BackRepoTableOutlet.Map_TableOutletPtr_TableOutletDBID[tableoutlet]; ok {

		if id, ok := backRepo.BackRepoTableOutlet.Map_TableOutletPtr_TableOutletDBID[tableoutlet]; ok {
			var tableoutletDB TableOutletDB
			tableoutletDB.ID = id

			if err := backRepo.BackRepoTableOutlet.db.First(&tableoutletDB, id).Error; err != nil {
				log.Panicln("CheckoutTableOutlet : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTableOutlet.CheckoutPhaseOneInstance(&tableoutletDB)
			backRepo.BackRepoTableOutlet.CheckoutPhaseTwoInstance(backRepo, &tableoutletDB)
		}
	}
}

// CopyBasicFieldsFromTableOutlet
func (tableoutletDB *TableOutletDB) CopyBasicFieldsFromTableOutlet(tableoutlet *models.TableOutlet) {
	// insertion point for fields commit

	tableoutletDB.Name_Data.String = tableoutlet.Name
	tableoutletDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTableOutletWOP
func (tableoutletDB *TableOutletDB) CopyBasicFieldsFromTableOutletWOP(tableoutlet *TableOutletWOP) {
	// insertion point for fields commit

	tableoutletDB.Name_Data.String = tableoutlet.Name
	tableoutletDB.Name_Data.Valid = true
}

// CopyBasicFieldsToTableOutlet
func (tableoutletDB *TableOutletDB) CopyBasicFieldsToTableOutlet(tableoutlet *models.TableOutlet) {
	// insertion point for checkout of basic fields (back repo to stage)
	tableoutlet.Name = tableoutletDB.Name_Data.String
}

// CopyBasicFieldsToTableOutletWOP
func (tableoutletDB *TableOutletDB) CopyBasicFieldsToTableOutletWOP(tableoutlet *TableOutletWOP) {
	tableoutlet.ID = int(tableoutletDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	tableoutlet.Name = tableoutletDB.Name_Data.String
}

// Backup generates a json file from a slice of all TableOutletDB instances in the backrepo
func (backRepoTableOutlet *BackRepoTableOutletStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TableOutletDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TableOutletDB, 0)
	for _, tableoutletDB := range backRepoTableOutlet.Map_TableOutletDBID_TableOutletDB {
		forBackup = append(forBackup, tableoutletDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json TableOutlet ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json TableOutlet file", err.Error())
	}
}

// Backup generates a json file from a slice of all TableOutletDB instances in the backrepo
func (backRepoTableOutlet *BackRepoTableOutletStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TableOutletDB, 0)
	for _, tableoutletDB := range backRepoTableOutlet.Map_TableOutletDBID_TableOutletDB {
		forBackup = append(forBackup, tableoutletDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("TableOutlet")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&TableOutlet_Fields, -1)
	for _, tableoutletDB := range forBackup {

		var tableoutletWOP TableOutletWOP
		tableoutletDB.CopyBasicFieldsToTableOutletWOP(&tableoutletWOP)

		row := sh.AddRow()
		row.WriteStruct(&tableoutletWOP, -1)
	}
}

// RestoreXL from the "TableOutlet" sheet all TableOutletDB instances
func (backRepoTableOutlet *BackRepoTableOutletStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTableOutletid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["TableOutlet"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTableOutlet.rowVisitorTableOutlet)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoTableOutlet *BackRepoTableOutletStruct) rowVisitorTableOutlet(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var tableoutletWOP TableOutletWOP
		row.ReadStruct(&tableoutletWOP)

		// add the unmarshalled struct to the stage
		tableoutletDB := new(TableOutletDB)
		tableoutletDB.CopyBasicFieldsFromTableOutletWOP(&tableoutletWOP)

		tableoutletDB_ID_atBackupTime := tableoutletDB.ID
		tableoutletDB.ID = 0
		query := backRepoTableOutlet.db.Create(tableoutletDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoTableOutlet.Map_TableOutletDBID_TableOutletDB[tableoutletDB.ID] = tableoutletDB
		BackRepoTableOutletid_atBckpTime_newID[tableoutletDB_ID_atBackupTime] = tableoutletDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TableOutletDB.json" in dirPath that stores an array
// of TableOutletDB and stores it in the database
// the map BackRepoTableOutletid_atBckpTime_newID is updated accordingly
func (backRepoTableOutlet *BackRepoTableOutletStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTableOutletid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TableOutletDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json TableOutlet file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TableOutletDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TableOutletDBID_TableOutletDB
	for _, tableoutletDB := range forRestore {

		tableoutletDB_ID_atBackupTime := tableoutletDB.ID
		tableoutletDB.ID = 0
		query := backRepoTableOutlet.db.Create(tableoutletDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoTableOutlet.Map_TableOutletDBID_TableOutletDB[tableoutletDB.ID] = tableoutletDB
		BackRepoTableOutletid_atBckpTime_newID[tableoutletDB_ID_atBackupTime] = tableoutletDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json TableOutlet file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<TableOutlet>id_atBckpTime_newID
// to compute new index
func (backRepoTableOutlet *BackRepoTableOutletStruct) RestorePhaseTwo() {

	for _, tableoutletDB := range backRepoTableOutlet.Map_TableOutletDBID_TableOutletDB {

		// next line of code is to avert unused variable compilation error
		_ = tableoutletDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoTableOutlet.db.Model(tableoutletDB).Updates(*tableoutletDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTableOutletid_atBckpTime_newID map[uint]uint
