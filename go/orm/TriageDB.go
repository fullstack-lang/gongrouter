// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongrouter/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Triage_sql sql.NullBool
var dummy_Triage_time time.Duration
var dummy_Triage_sort sort.Float64Slice

// TriageAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model triageAPI
type TriageAPI struct {
	gorm.Model

	models.Triage

	// encoding of pointers
	TriagePointersEnconding
}

// TriagePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TriagePointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// TriageDB describes a triage in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model triageDB
type TriageDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field triageDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	TriagePointersEnconding
}

// TriageDBs arrays triageDBs
// swagger:response triageDBsResponse
type TriageDBs []TriageDB

// TriageDBResponse provides response
// swagger:response triageDBResponse
type TriageDBResponse struct {
	TriageDB
}

// TriageWOP is a Triage without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TriageWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Triage_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoTriageStruct struct {
	// stores TriageDB according to their gorm ID
	Map_TriageDBID_TriageDB map[uint]*TriageDB

	// stores TriageDB ID according to Triage address
	Map_TriagePtr_TriageDBID map[*models.Triage]uint

	// stores Triage according to their gorm ID
	Map_TriageDBID_TriagePtr map[uint]*models.Triage

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTriage *BackRepoTriageStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTriage.stage
	return
}

func (backRepoTriage *BackRepoTriageStruct) GetDB() *gorm.DB {
	return backRepoTriage.db
}

// GetTriageDBFromTriagePtr is a handy function to access the back repo instance from the stage instance
func (backRepoTriage *BackRepoTriageStruct) GetTriageDBFromTriagePtr(triage *models.Triage) (triageDB *TriageDB) {
	id := backRepoTriage.Map_TriagePtr_TriageDBID[triage]
	triageDB = backRepoTriage.Map_TriageDBID_TriageDB[id]
	return
}

// BackRepoTriage.CommitPhaseOne commits all staged instances of Triage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTriage *BackRepoTriageStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for triage := range stage.Triages {
		backRepoTriage.CommitPhaseOneInstance(triage)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, triage := range backRepoTriage.Map_TriageDBID_TriagePtr {
		if _, ok := stage.Triages[triage]; !ok {
			backRepoTriage.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTriage.CommitDeleteInstance commits deletion of Triage to the BackRepo
func (backRepoTriage *BackRepoTriageStruct) CommitDeleteInstance(id uint) (Error error) {

	triage := backRepoTriage.Map_TriageDBID_TriagePtr[id]

	// triage is not staged anymore, remove triageDB
	triageDB := backRepoTriage.Map_TriageDBID_TriageDB[id]
	query := backRepoTriage.db.Unscoped().Delete(&triageDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoTriage.Map_TriagePtr_TriageDBID, triage)
	delete(backRepoTriage.Map_TriageDBID_TriagePtr, id)
	delete(backRepoTriage.Map_TriageDBID_TriageDB, id)

	return
}

// BackRepoTriage.CommitPhaseOneInstance commits triage staged instances of Triage to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTriage *BackRepoTriageStruct) CommitPhaseOneInstance(triage *models.Triage) (Error error) {

	// check if the triage is not commited yet
	if _, ok := backRepoTriage.Map_TriagePtr_TriageDBID[triage]; ok {
		return
	}

	// initiate triage
	var triageDB TriageDB
	triageDB.CopyBasicFieldsFromTriage(triage)

	query := backRepoTriage.db.Create(&triageDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoTriage.Map_TriagePtr_TriageDBID[triage] = triageDB.ID
	backRepoTriage.Map_TriageDBID_TriagePtr[triageDB.ID] = triage
	backRepoTriage.Map_TriageDBID_TriageDB[triageDB.ID] = &triageDB

	return
}

// BackRepoTriage.CommitPhaseTwo commits all staged instances of Triage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTriage *BackRepoTriageStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, triage := range backRepoTriage.Map_TriageDBID_TriagePtr {
		backRepoTriage.CommitPhaseTwoInstance(backRepo, idx, triage)
	}

	return
}

// BackRepoTriage.CommitPhaseTwoInstance commits {{structname }} of models.Triage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTriage *BackRepoTriageStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, triage *models.Triage) (Error error) {

	// fetch matching triageDB
	if triageDB, ok := backRepoTriage.Map_TriageDBID_TriageDB[idx]; ok {

		triageDB.CopyBasicFieldsFromTriage(triage)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoTriage.db.Save(&triageDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Triage intance %s", triage.Name))
		return err
	}

	return
}

// BackRepoTriage.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTriage *BackRepoTriageStruct) CheckoutPhaseOne() (Error error) {

	triageDBArray := make([]TriageDB, 0)
	query := backRepoTriage.db.Find(&triageDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	triageInstancesToBeRemovedFromTheStage := make(map[*models.Triage]any)
	for key, value := range backRepoTriage.stage.Triages {
		triageInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, triageDB := range triageDBArray {
		backRepoTriage.CheckoutPhaseOneInstance(&triageDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		triage, ok := backRepoTriage.Map_TriageDBID_TriagePtr[triageDB.ID]
		if ok {
			delete(triageInstancesToBeRemovedFromTheStage, triage)
		}
	}

	// remove from stage and back repo's 3 maps all triages that are not in the checkout
	for triage := range triageInstancesToBeRemovedFromTheStage {
		triage.Unstage(backRepoTriage.GetStage())

		// remove instance from the back repo 3 maps
		triageID := backRepoTriage.Map_TriagePtr_TriageDBID[triage]
		delete(backRepoTriage.Map_TriagePtr_TriageDBID, triage)
		delete(backRepoTriage.Map_TriageDBID_TriageDB, triageID)
		delete(backRepoTriage.Map_TriageDBID_TriagePtr, triageID)
	}

	return
}

// CheckoutPhaseOneInstance takes a triageDB that has been found in the DB, updates the backRepo and stages the
// models version of the triageDB
func (backRepoTriage *BackRepoTriageStruct) CheckoutPhaseOneInstance(triageDB *TriageDB) (Error error) {

	triage, ok := backRepoTriage.Map_TriageDBID_TriagePtr[triageDB.ID]
	if !ok {
		triage = new(models.Triage)

		backRepoTriage.Map_TriageDBID_TriagePtr[triageDB.ID] = triage
		backRepoTriage.Map_TriagePtr_TriageDBID[triage] = triageDB.ID

		// append model store with the new element
		triage.Name = triageDB.Name_Data.String
		triage.Stage(backRepoTriage.GetStage())
	}
	triageDB.CopyBasicFieldsToTriage(triage)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	triage.Stage(backRepoTriage.GetStage())

	// preserve pointer to triageDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TriageDBID_TriageDB)[triageDB hold variable pointers
	triageDB_Data := *triageDB
	preservedPtrToTriage := &triageDB_Data
	backRepoTriage.Map_TriageDBID_TriageDB[triageDB.ID] = preservedPtrToTriage

	return
}

// BackRepoTriage.CheckoutPhaseTwo Checkouts all staged instances of Triage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTriage *BackRepoTriageStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, triageDB := range backRepoTriage.Map_TriageDBID_TriageDB {
		backRepoTriage.CheckoutPhaseTwoInstance(backRepo, triageDB)
	}
	return
}

// BackRepoTriage.CheckoutPhaseTwoInstance Checkouts staged instances of Triage to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTriage *BackRepoTriageStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, triageDB *TriageDB) (Error error) {

	triage := backRepoTriage.Map_TriageDBID_TriagePtr[triageDB.ID]
	_ = triage // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitTriage allows commit of a single triage (if already staged)
func (backRepo *BackRepoStruct) CommitTriage(triage *models.Triage) {
	backRepo.BackRepoTriage.CommitPhaseOneInstance(triage)
	if id, ok := backRepo.BackRepoTriage.Map_TriagePtr_TriageDBID[triage]; ok {
		backRepo.BackRepoTriage.CommitPhaseTwoInstance(backRepo, id, triage)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTriage allows checkout of a single triage (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTriage(triage *models.Triage) {
	// check if the triage is staged
	if _, ok := backRepo.BackRepoTriage.Map_TriagePtr_TriageDBID[triage]; ok {

		if id, ok := backRepo.BackRepoTriage.Map_TriagePtr_TriageDBID[triage]; ok {
			var triageDB TriageDB
			triageDB.ID = id

			if err := backRepo.BackRepoTriage.db.First(&triageDB, id).Error; err != nil {
				log.Panicln("CheckoutTriage : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTriage.CheckoutPhaseOneInstance(&triageDB)
			backRepo.BackRepoTriage.CheckoutPhaseTwoInstance(backRepo, &triageDB)
		}
	}
}

// CopyBasicFieldsFromTriage
func (triageDB *TriageDB) CopyBasicFieldsFromTriage(triage *models.Triage) {
	// insertion point for fields commit

	triageDB.Name_Data.String = triage.Name
	triageDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTriageWOP
func (triageDB *TriageDB) CopyBasicFieldsFromTriageWOP(triage *TriageWOP) {
	// insertion point for fields commit

	triageDB.Name_Data.String = triage.Name
	triageDB.Name_Data.Valid = true
}

// CopyBasicFieldsToTriage
func (triageDB *TriageDB) CopyBasicFieldsToTriage(triage *models.Triage) {
	// insertion point for checkout of basic fields (back repo to stage)
	triage.Name = triageDB.Name_Data.String
}

// CopyBasicFieldsToTriageWOP
func (triageDB *TriageDB) CopyBasicFieldsToTriageWOP(triage *TriageWOP) {
	triage.ID = int(triageDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	triage.Name = triageDB.Name_Data.String
}

// Backup generates a json file from a slice of all TriageDB instances in the backrepo
func (backRepoTriage *BackRepoTriageStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TriageDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TriageDB, 0)
	for _, triageDB := range backRepoTriage.Map_TriageDBID_TriageDB {
		forBackup = append(forBackup, triageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Triage ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Triage file", err.Error())
	}
}

// Backup generates a json file from a slice of all TriageDB instances in the backrepo
func (backRepoTriage *BackRepoTriageStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TriageDB, 0)
	for _, triageDB := range backRepoTriage.Map_TriageDBID_TriageDB {
		forBackup = append(forBackup, triageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Triage")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Triage_Fields, -1)
	for _, triageDB := range forBackup {

		var triageWOP TriageWOP
		triageDB.CopyBasicFieldsToTriageWOP(&triageWOP)

		row := sh.AddRow()
		row.WriteStruct(&triageWOP, -1)
	}
}

// RestoreXL from the "Triage" sheet all TriageDB instances
func (backRepoTriage *BackRepoTriageStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTriageid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Triage"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTriage.rowVisitorTriage)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoTriage *BackRepoTriageStruct) rowVisitorTriage(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var triageWOP TriageWOP
		row.ReadStruct(&triageWOP)

		// add the unmarshalled struct to the stage
		triageDB := new(TriageDB)
		triageDB.CopyBasicFieldsFromTriageWOP(&triageWOP)

		triageDB_ID_atBackupTime := triageDB.ID
		triageDB.ID = 0
		query := backRepoTriage.db.Create(triageDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoTriage.Map_TriageDBID_TriageDB[triageDB.ID] = triageDB
		BackRepoTriageid_atBckpTime_newID[triageDB_ID_atBackupTime] = triageDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TriageDB.json" in dirPath that stores an array
// of TriageDB and stores it in the database
// the map BackRepoTriageid_atBckpTime_newID is updated accordingly
func (backRepoTriage *BackRepoTriageStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTriageid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TriageDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Triage file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TriageDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TriageDBID_TriageDB
	for _, triageDB := range forRestore {

		triageDB_ID_atBackupTime := triageDB.ID
		triageDB.ID = 0
		query := backRepoTriage.db.Create(triageDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoTriage.Map_TriageDBID_TriageDB[triageDB.ID] = triageDB
		BackRepoTriageid_atBckpTime_newID[triageDB_ID_atBackupTime] = triageDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Triage file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Triage>id_atBckpTime_newID
// to compute new index
func (backRepoTriage *BackRepoTriageStruct) RestorePhaseTwo() {

	for _, triageDB := range backRepoTriage.Map_TriageDBID_TriageDB {

		// next line of code is to avert unused variable compilation error
		_ = triageDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoTriage.db.Model(triageDB).Updates(*triageDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTriageid_atBckpTime_newID map[uint]uint
