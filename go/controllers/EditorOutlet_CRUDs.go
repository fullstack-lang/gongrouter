// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongrouter/go/models"
	"github.com/fullstack-lang/gongrouter/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __EditorOutlet__dummysDeclaration__ models.EditorOutlet
var __EditorOutlet_time__dummyDeclaration time.Duration

// An EditorOutletID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getEditorOutlet updateEditorOutlet deleteEditorOutlet
type EditorOutletID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// EditorOutletInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postEditorOutlet updateEditorOutlet
type EditorOutletInput struct {
	// The EditorOutlet to submit or modify
	// in: body
	EditorOutlet *orm.EditorOutletAPI
}

// GetEditorOutlets
//
// swagger:route GET /editoroutlets editoroutlets getEditorOutlets
//
// # Get all editoroutlets
//
// Responses:
// default: genericError
//
//	200: editoroutletDBResponse
func (controller *Controller) GetEditorOutlets(c *gin.Context) {

	// source slice
	var editoroutletDBs []orm.EditorOutletDB

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetEditorOutlets", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoEditorOutlet.GetDB()

	query := db.Find(&editoroutletDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	editoroutletAPIs := make([]orm.EditorOutletAPI, 0)

	// for each editoroutlet, update fields from the database nullable fields
	for idx := range editoroutletDBs {
		editoroutletDB := &editoroutletDBs[idx]
		_ = editoroutletDB
		var editoroutletAPI orm.EditorOutletAPI

		// insertion point for updating fields
		editoroutletAPI.ID = editoroutletDB.ID
		editoroutletDB.CopyBasicFieldsToEditorOutlet(&editoroutletAPI.EditorOutlet)
		editoroutletAPI.EditorOutletPointersEnconding = editoroutletDB.EditorOutletPointersEnconding
		editoroutletAPIs = append(editoroutletAPIs, editoroutletAPI)
	}

	c.JSON(http.StatusOK, editoroutletAPIs)
}

// PostEditorOutlet
//
// swagger:route POST /editoroutlets editoroutlets postEditorOutlet
//
// Creates a editoroutlet
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func (controller *Controller) PostEditorOutlet(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("PostEditorOutlets", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoEditorOutlet.GetDB()

	// Validate input
	var input orm.EditorOutletAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create editoroutlet
	editoroutletDB := orm.EditorOutletDB{}
	editoroutletDB.EditorOutletPointersEnconding = input.EditorOutletPointersEnconding
	editoroutletDB.CopyBasicFieldsFromEditorOutlet(&input.EditorOutlet)

	query := db.Create(&editoroutletDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	backRepo.BackRepoEditorOutlet.CheckoutPhaseOneInstance(&editoroutletDB)
	editoroutlet := backRepo.BackRepoEditorOutlet.Map_EditorOutletDBID_EditorOutletPtr[editoroutletDB.ID]

	if editoroutlet != nil {
		models.AfterCreateFromFront(backRepo.GetStage(), editoroutlet)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, editoroutletDB)
}

// GetEditorOutlet
//
// swagger:route GET /editoroutlets/{ID} editoroutlets getEditorOutlet
//
// Gets the details for a editoroutlet.
//
// Responses:
// default: genericError
//
//	200: editoroutletDBResponse
func (controller *Controller) GetEditorOutlet(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetEditorOutlet", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoEditorOutlet.GetDB()

	// Get editoroutletDB in DB
	var editoroutletDB orm.EditorOutletDB
	if err := db.First(&editoroutletDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var editoroutletAPI orm.EditorOutletAPI
	editoroutletAPI.ID = editoroutletDB.ID
	editoroutletAPI.EditorOutletPointersEnconding = editoroutletDB.EditorOutletPointersEnconding
	editoroutletDB.CopyBasicFieldsToEditorOutlet(&editoroutletAPI.EditorOutlet)

	c.JSON(http.StatusOK, editoroutletAPI)
}

// UpdateEditorOutlet
//
// swagger:route PATCH /editoroutlets/{ID} editoroutlets updateEditorOutlet
//
// # Update a editoroutlet
//
// Responses:
// default: genericError
//
//	200: editoroutletDBResponse
func (controller *Controller) UpdateEditorOutlet(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("UpdateEditorOutlet", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoEditorOutlet.GetDB()

	// Validate input
	var input orm.EditorOutletAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// Get model if exist
	var editoroutletDB orm.EditorOutletDB

	// fetch the editoroutlet
	query := db.First(&editoroutletDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// update
	editoroutletDB.CopyBasicFieldsFromEditorOutlet(&input.EditorOutlet)
	editoroutletDB.EditorOutletPointersEnconding = input.EditorOutletPointersEnconding

	query = db.Model(&editoroutletDB).Updates(editoroutletDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	editoroutletNew := new(models.EditorOutlet)
	editoroutletDB.CopyBasicFieldsToEditorOutlet(editoroutletNew)

	// get stage instance from DB instance, and call callback function
	editoroutletOld := backRepo.BackRepoEditorOutlet.Map_EditorOutletDBID_EditorOutletPtr[editoroutletDB.ID]
	if editoroutletOld != nil {
		models.AfterUpdateFromFront(backRepo.GetStage(), editoroutletOld, editoroutletNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	backRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the editoroutletDB
	c.JSON(http.StatusOK, editoroutletDB)
}

// DeleteEditorOutlet
//
// swagger:route DELETE /editoroutlets/{ID} editoroutlets deleteEditorOutlet
//
// # Delete a editoroutlet
//
// default: genericError
//
//	200: editoroutletDBResponse
func (controller *Controller) DeleteEditorOutlet(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("DeleteEditorOutlet", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoEditorOutlet.GetDB()

	// Get model if exist
	var editoroutletDB orm.EditorOutletDB
	if err := db.First(&editoroutletDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&editoroutletDB)

	// get an instance (not staged) from DB instance, and call callback function
	editoroutletDeleted := new(models.EditorOutlet)
	editoroutletDB.CopyBasicFieldsToEditorOutlet(editoroutletDeleted)

	// get stage instance from DB instance, and call callback function
	editoroutletStaged := backRepo.BackRepoEditorOutlet.Map_EditorOutletDBID_EditorOutletPtr[editoroutletDB.ID]
	if editoroutletStaged != nil {
		models.AfterDeleteFromFront(backRepo.GetStage(), editoroutletStaged, editoroutletDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
