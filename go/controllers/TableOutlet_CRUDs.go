// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongrouter/go/models"
	"github.com/fullstack-lang/gongrouter/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __TableOutlet__dummysDeclaration__ models.TableOutlet
var __TableOutlet_time__dummyDeclaration time.Duration

// An TableOutletID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getTableOutlet updateTableOutlet deleteTableOutlet
type TableOutletID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// TableOutletInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postTableOutlet updateTableOutlet
type TableOutletInput struct {
	// The TableOutlet to submit or modify
	// in: body
	TableOutlet *orm.TableOutletAPI
}

// GetTableOutlets
//
// swagger:route GET /tableoutlets tableoutlets getTableOutlets
//
// # Get all tableoutlets
//
// Responses:
// default: genericError
//
//	200: tableoutletDBResponse
func (controller *Controller) GetTableOutlets(c *gin.Context) {

	// source slice
	var tableoutletDBs []orm.TableOutletDB

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetTableOutlets", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoTableOutlet.GetDB()

	query := db.Find(&tableoutletDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	tableoutletAPIs := make([]orm.TableOutletAPI, 0)

	// for each tableoutlet, update fields from the database nullable fields
	for idx := range tableoutletDBs {
		tableoutletDB := &tableoutletDBs[idx]
		_ = tableoutletDB
		var tableoutletAPI orm.TableOutletAPI

		// insertion point for updating fields
		tableoutletAPI.ID = tableoutletDB.ID
		tableoutletDB.CopyBasicFieldsToTableOutlet(&tableoutletAPI.TableOutlet)
		tableoutletAPI.TableOutletPointersEnconding = tableoutletDB.TableOutletPointersEnconding
		tableoutletAPIs = append(tableoutletAPIs, tableoutletAPI)
	}

	c.JSON(http.StatusOK, tableoutletAPIs)
}

// PostTableOutlet
//
// swagger:route POST /tableoutlets tableoutlets postTableOutlet
//
// Creates a tableoutlet
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func (controller *Controller) PostTableOutlet(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("PostTableOutlets", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoTableOutlet.GetDB()

	// Validate input
	var input orm.TableOutletAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create tableoutlet
	tableoutletDB := orm.TableOutletDB{}
	tableoutletDB.TableOutletPointersEnconding = input.TableOutletPointersEnconding
	tableoutletDB.CopyBasicFieldsFromTableOutlet(&input.TableOutlet)

	query := db.Create(&tableoutletDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	backRepo.BackRepoTableOutlet.CheckoutPhaseOneInstance(&tableoutletDB)
	tableoutlet := backRepo.BackRepoTableOutlet.Map_TableOutletDBID_TableOutletPtr[tableoutletDB.ID]

	if tableoutlet != nil {
		models.AfterCreateFromFront(backRepo.GetStage(), tableoutlet)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, tableoutletDB)
}

// GetTableOutlet
//
// swagger:route GET /tableoutlets/{ID} tableoutlets getTableOutlet
//
// Gets the details for a tableoutlet.
//
// Responses:
// default: genericError
//
//	200: tableoutletDBResponse
func (controller *Controller) GetTableOutlet(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetTableOutlet", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoTableOutlet.GetDB()

	// Get tableoutletDB in DB
	var tableoutletDB orm.TableOutletDB
	if err := db.First(&tableoutletDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var tableoutletAPI orm.TableOutletAPI
	tableoutletAPI.ID = tableoutletDB.ID
	tableoutletAPI.TableOutletPointersEnconding = tableoutletDB.TableOutletPointersEnconding
	tableoutletDB.CopyBasicFieldsToTableOutlet(&tableoutletAPI.TableOutlet)

	c.JSON(http.StatusOK, tableoutletAPI)
}

// UpdateTableOutlet
//
// swagger:route PATCH /tableoutlets/{ID} tableoutlets updateTableOutlet
//
// # Update a tableoutlet
//
// Responses:
// default: genericError
//
//	200: tableoutletDBResponse
func (controller *Controller) UpdateTableOutlet(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("UpdateTableOutlet", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoTableOutlet.GetDB()

	// Validate input
	var input orm.TableOutletAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// Get model if exist
	var tableoutletDB orm.TableOutletDB

	// fetch the tableoutlet
	query := db.First(&tableoutletDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// update
	tableoutletDB.CopyBasicFieldsFromTableOutlet(&input.TableOutlet)
	tableoutletDB.TableOutletPointersEnconding = input.TableOutletPointersEnconding

	query = db.Model(&tableoutletDB).Updates(tableoutletDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	tableoutletNew := new(models.TableOutlet)
	tableoutletDB.CopyBasicFieldsToTableOutlet(tableoutletNew)

	// get stage instance from DB instance, and call callback function
	tableoutletOld := backRepo.BackRepoTableOutlet.Map_TableOutletDBID_TableOutletPtr[tableoutletDB.ID]
	if tableoutletOld != nil {
		models.AfterUpdateFromFront(backRepo.GetStage(), tableoutletOld, tableoutletNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	backRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the tableoutletDB
	c.JSON(http.StatusOK, tableoutletDB)
}

// DeleteTableOutlet
//
// swagger:route DELETE /tableoutlets/{ID} tableoutlets deleteTableOutlet
//
// # Delete a tableoutlet
//
// default: genericError
//
//	200: tableoutletDBResponse
func (controller *Controller) DeleteTableOutlet(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("DeleteTableOutlet", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoTableOutlet.GetDB()

	// Get model if exist
	var tableoutletDB orm.TableOutletDB
	if err := db.First(&tableoutletDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&tableoutletDB)

	// get an instance (not staged) from DB instance, and call callback function
	tableoutletDeleted := new(models.TableOutlet)
	tableoutletDB.CopyBasicFieldsToTableOutlet(tableoutletDeleted)

	// get stage instance from DB instance, and call callback function
	tableoutletStaged := backRepo.BackRepoTableOutlet.Map_TableOutletDBID_TableOutletPtr[tableoutletDB.ID]
	if tableoutletStaged != nil {
		models.AfterDeleteFromFront(backRepo.GetStage(), tableoutletStaged, tableoutletDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
