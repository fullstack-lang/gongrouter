// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongrouter/go/models"
	"github.com/fullstack-lang/gongrouter/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Triage__dummysDeclaration__ models.Triage
var __Triage_time__dummyDeclaration time.Duration

// An TriageID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getTriage updateTriage deleteTriage
type TriageID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// TriageInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postTriage updateTriage
type TriageInput struct {
	// The Triage to submit or modify
	// in: body
	Triage *orm.TriageAPI
}

// GetTriages
//
// swagger:route GET /triages triages getTriages
//
// # Get all triages
//
// Responses:
// default: genericError
//
//	200: triageDBResponse
func (controller *Controller) GetTriages(c *gin.Context) {

	// source slice
	var triageDBs []orm.TriageDB

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetTriages", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoTriage.GetDB()

	query := db.Find(&triageDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	triageAPIs := make([]orm.TriageAPI, 0)

	// for each triage, update fields from the database nullable fields
	for idx := range triageDBs {
		triageDB := &triageDBs[idx]
		_ = triageDB
		var triageAPI orm.TriageAPI

		// insertion point for updating fields
		triageAPI.ID = triageDB.ID
		triageDB.CopyBasicFieldsToTriage(&triageAPI.Triage)
		triageAPI.TriagePointersEnconding = triageDB.TriagePointersEnconding
		triageAPIs = append(triageAPIs, triageAPI)
	}

	c.JSON(http.StatusOK, triageAPIs)
}

// PostTriage
//
// swagger:route POST /triages triages postTriage
//
// Creates a triage
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func (controller *Controller) PostTriage(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("PostTriages", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoTriage.GetDB()

	// Validate input
	var input orm.TriageAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create triage
	triageDB := orm.TriageDB{}
	triageDB.TriagePointersEnconding = input.TriagePointersEnconding
	triageDB.CopyBasicFieldsFromTriage(&input.Triage)

	query := db.Create(&triageDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	backRepo.BackRepoTriage.CheckoutPhaseOneInstance(&triageDB)
	triage := backRepo.BackRepoTriage.Map_TriageDBID_TriagePtr[triageDB.ID]

	if triage != nil {
		models.AfterCreateFromFront(backRepo.GetStage(), triage)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, triageDB)
}

// GetTriage
//
// swagger:route GET /triages/{ID} triages getTriage
//
// Gets the details for a triage.
//
// Responses:
// default: genericError
//
//	200: triageDBResponse
func (controller *Controller) GetTriage(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetTriage", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoTriage.GetDB()

	// Get triageDB in DB
	var triageDB orm.TriageDB
	if err := db.First(&triageDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var triageAPI orm.TriageAPI
	triageAPI.ID = triageDB.ID
	triageAPI.TriagePointersEnconding = triageDB.TriagePointersEnconding
	triageDB.CopyBasicFieldsToTriage(&triageAPI.Triage)

	c.JSON(http.StatusOK, triageAPI)
}

// UpdateTriage
//
// swagger:route PATCH /triages/{ID} triages updateTriage
//
// # Update a triage
//
// Responses:
// default: genericError
//
//	200: triageDBResponse
func (controller *Controller) UpdateTriage(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("UpdateTriage", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoTriage.GetDB()

	// Validate input
	var input orm.TriageAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// Get model if exist
	var triageDB orm.TriageDB

	// fetch the triage
	query := db.First(&triageDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// update
	triageDB.CopyBasicFieldsFromTriage(&input.Triage)
	triageDB.TriagePointersEnconding = input.TriagePointersEnconding

	query = db.Model(&triageDB).Updates(triageDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	triageNew := new(models.Triage)
	triageDB.CopyBasicFieldsToTriage(triageNew)

	// get stage instance from DB instance, and call callback function
	triageOld := backRepo.BackRepoTriage.Map_TriageDBID_TriagePtr[triageDB.ID]
	if triageOld != nil {
		models.AfterUpdateFromFront(backRepo.GetStage(), triageOld, triageNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	backRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the triageDB
	c.JSON(http.StatusOK, triageDB)
}

// DeleteTriage
//
// swagger:route DELETE /triages/{ID} triages deleteTriage
//
// # Delete a triage
//
// default: genericError
//
//	200: triageDBResponse
func (controller *Controller) DeleteTriage(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("DeleteTriage", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoTriage.GetDB()

	// Get model if exist
	var triageDB orm.TriageDB
	if err := db.First(&triageDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&triageDB)

	// get an instance (not staged) from DB instance, and call callback function
	triageDeleted := new(models.Triage)
	triageDB.CopyBasicFieldsToTriage(triageDeleted)

	// get stage instance from DB instance, and call callback function
	triageStaged := backRepo.BackRepoTriage.Map_TriageDBID_TriagePtr[triageDB.ID]
	if triageStaged != nil {
		models.AfterDeleteFromFront(backRepo.GetStage(), triageStaged, triageDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
